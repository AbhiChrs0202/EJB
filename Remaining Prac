5a. Create an html page with fields, eno, name, age, desg, salary. Now on submit this data to a JSP
page which will update the employee table of database with matching eno.
create table emp(empid varchar(10) PRIMARY KEY, ename varchar(50), salary varchar(50),age
varchar(50) )
insert into emp values('1','aaa','221234','11')
insert into emp values('2','bbb','334567','22')
insert into emp values('3','ccc','44454','33')
insert into emp values('4','ddd','55123','44')
---- index.html ---------
<html>
<body>
<form action="UpdateEmp.jsp" >
 Enter Employee Number<input type="text" name="txtEno" ><br>
 Enter Name<input type="text" name="txtName" ><br>
 Enter age<input type="text" name="txtAge" ><br>
 Enter Salary<input type="text" name="txtSal" ><br>
<input type="reset" ><input type="submit">
</form>
</body>
</html>
------------------- UpdateEmp.java --------------------------------
<%@page contentType="text/html" import="java.sql.*" %>
<html><body>
<h1>Employee Record Update</h1>
<%
 String eno=request.getParameter("txtEno");
 String name=request.getParameter("txtName");
 String age = request.getParameter("txtAge");
 String sal = request.getParameter("txtSal");
 try{
 Class.forName("com.mysql.jdbc.Driver");
 Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/empdb");
 PreparedStatement stmt = con.prepareStatement("select * from emp where empid=?");
 stmt.setString(1, eno);
 ResultSet rs = stmt.executeQuery();
 if(rs.next()){
 out.println("<h1>~~~ Employee "+name+" Exist ~~~ </h1>");
 PreparedStatement pst1= con.prepareStatement("update emp set salary=? where empid=?");
 PreparedStatement pst2= con.prepareStatement("update emp set age=? where empid=?");
 pst1.setString(1, sal); pst1.setString(2, eno);
 pst2.setString(1, age); pst2.setString(2, eno);
 pst1.executeUpdate(); pst2.executeUpdate();
 }
else{
 out.println("<h1>Employee Record not exist !!!!!</h1>");
 }
 }catch(Exception e){out.println(e);}
 %></body></html>


5b. Create a JSP page to demonstrate the use of Expression language.
<< any example to demonstrate the use of EL like calculator or any formulas etcâ€¦. >>


5c. Create a JSP application to demonstrate the use of JSTL.
Basic insert, update and delete example using core and sql tag libraries in JSTL.
CREATEDATABASEIF NOTEXISTS sampleDB;
CREATETABLE`product` (
`id` int(10) unsigned NOTNULLauto_increment,
`pname` varchar(45) NOTNULL,
`quantity` int(10) unsigned NOTNULL,
PRIMARYKEY (`id`)
);
INSERTINTO`product` (`id`,`pname`,`quantity`) VALUES
(1,'Mouse',50),
(2,'Keyboard',5),
(3,'Monitor',34);
1. index.jsp
<%@page contentType="text/html" pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<metahttp-equiv="Content-Type"content="text/html; charset=UTF-8">
<title>JSP Page</title>
</head>
<body>
<h1>Choose Option</h1>
<ahref="insert.jsp">Insert Record</a><p></p>
<ahref="display.jsp">Display Record</a>
</body>
</html>
2. insert.jsp
<%@page contentType="text/html" pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<!DOCTYPE html>
<html>
<head>
<metahttp-equiv="Content-Type"content="text/html; charset=UTF-8">
<title>JSP Page</title>
</head>
<body>
<formaction="insertdb.jsp"method="post">
<tableborder="0"cellspacing="2"cellpadding="5">
<thead>
<tr>
<thcolspan="2">Purchase Product</th>
</tr>
</thead>
<tbody>
<tr>
<td><label>Product Name</label></td>
<td><inputtype="text"name="pname"/></td>
</tr>
<tr>
<td><label>Quantity</label></td>
<td><inputtype="text"name="qty"/></td>
</tr>
<tr>
<td><inputtype="submit"value="Save"/></td>
<td><inputtype="reset"value="reset"/></td>
</tr>
</tbody>
</table>
</form>
<fontcolor="red"><c:iftest="${not empty param.errMsg}">
<c:outvalue="${param.errMsg}"/>
<ahref="index.jsp">Go Back</a>
</c:if></font>
<fontcolor="green"><c:iftest="${not empty param.susMsg}">
<c:outvalue="${param.susMsg}"/>
<ahref="index.jsp">Go Back</a>
</c:if></font>
</body>
</html>
3. insertdb.jsp
<%@ page import="java.io.*,java.util.*,java.sql.*"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/sql" prefix="sql"%>
<html>
<head>
<title>JINSERT Operation</title>
</head>
<body>
<c:iftest="${ empty param.pname or empty param.qty}">
<c:redirecturl="insert.jsp">
<c:paramname="errMsg"value="Please Enter Product and Quantity"/>
</c:redirect>
</c:if>
<sql:setDataSourcevar="dbsource"driver="com.mysql.jdbc.Driver"
url="jdbc:mysql://localhost/sampleDB"
user="root" password="pass"/>
<sql:updatedataSource="${dbsource}"var="result">
INSERT INTO product(pname, quantity) VALUES (?,?);
<sql:paramvalue="${param.pname}"/>
<sql:paramvalue="${param.qty}"/>
</sql:update>
<c:iftest="${result>=1}">
<fontsize="5"color='green'> Congratulations ! Data inserted
successfully.</font>
<c:redirecturl="insert.jsp">
<c:paramname="susMsg"value="Congratulations ! Data inserted
successfully." />
</c:redirect>
</c:if>
</body>
</html>
4. display.jsp
<%@ page import="java.io.*,java.util.*,java.sql.*"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/sql" prefix="sql"%>
<html>
<head>
<title>SELECT Operation</title>
<script>
function confirmGo(m,u) {
if ( confirm(m) ) {
window.location = u;
}
}
</script>
</head>
<body>
<sql:setDataSourcevar="dbsource"driver="com.mysql.jdbc.Driver"
url="jdbc:mysql://localhost/sampleDB"
user="root" password="pass"/>
<sql:querydataSource="${dbsource}"var="result">
SELECT * from product;
</sql:query>
<center>
<form>
<tableborder="1"width="40%">
<caption>Product List</caption>
<tr>
<th>Product ID</th>
<th>Product Name</th>
<th>Quantity</th>
<thcolspan="2">Action</th>
</tr>
<c:forEachvar="row"items="${result.rows}">
<tr>
<td><c:outvalue="${row.id}"/></td>
<td><c:outvalue="${row.pname}"/></td>
<td><c:outvalue="${row.quantity}"/></td>
<td><ahref="update.jsp?id=<c:out
value="${row.id}"/>">Update</a></td>
<td><ahref="javascript:confirmGo('Sure to delete this
record?','deletedb.jsp?id=<c:out value="${row.id}"/>')">Delete</a></td>
</tr>
</c:forEach>
</table>
</form>
<ahref="index.jsp">Go Home</a>
</center>
</body>
</html>
5. update.jsp
<%@page contentType="text/html" pageEncoding="UTF-8"%>
<%@ page import="java.io.*,java.util.*,java.sql.*"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/sql" prefix="sql"%>
<!DOCTYPE html>
<html>
<head>
<metahttp-equiv="Content-Type"content="text/html; charset=UTF-8">
<title>JSP Page</title>
</head>
<body>
<sql:setDataSourcevar="dbsource"driver="com.mysql.jdbc.Driver"
url="jdbc:mysql://localhost/sampleDB"
user="root" password="pass"/>
<sql:querydataSource="${dbsource}"var="result">
SELECT * from product where id=?;
<sql:paramvalue="${param.id}"/>
</sql:query>
<formaction="updatedb.jsp"method="post">
<tableborder="0"width="40%">
<caption>Update Product</caption>
<tr>
<th>Product Name</th>
<th>Quantity</th>
</tr>
<c:forEachvar="row"items="${result.rows}">
<tr>
<td><inputtype="hidden"value="${param.id}"name="id"/>
<inputtype="text"value="${row.pname}"name="pname"/></td>
<td><inputtype="text"value="${row.quantity}"name="qty"/></td>
<td><inputtype="submit"value="Update"/></td>
</tr>
</c:forEach>
</table>
<ahref="index.jsp">Go Home</a>
</form>
</body>
</html>
6. updatedb.jsp
<%@page contentType="text/html" pageEncoding="UTF-8"%>
<%@ page import="java.io.*,java.util.*,java.sql.*"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/sql" prefix="sql"%>
<!DOCTYPE html>
<html>
<head>
<metahttp-equiv="Content-Type"content="text/html; charset=UTF-8">
<title>JSP Page</title>
</head>
<body>
<sql:setDataSourcevar="dbsource"driver="com.mysql.jdbc.Driver"
url="jdbc:mysql://localhost/sampleDB"
user="root" password="pass"/>
<sql:updatedataSource="${dbsource}"var="count">
UPDATE product SET pname = ?, quantity=?
WHERE id='${param.id}'
<sql:paramvalue="${param.pname}"/>
<sql:paramvalue="${param.qty}"/>
</sql:update>
<c:iftest="${count>=1}">
<fontsize="5"color='green'> Congratulations ! Data updated
successfully.</font>
<ahref="index.jsp">Go Home</a>
</c:if>
</body>
</html>
7. deletedb.jsp
<%@page contentType="text/html" pageEncoding="UTF-8"%>
<%@ page import="java.io.*,java.util.*,java.sql.*"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/sql" prefix="sql"%>
<!DOCTYPE html>
<html>
<head>
<metahttp-equiv="Content-Type"content="text/html; charset=UTF-8">
<title>JSP Page</title>
</head>
<body>
<sql:setDataSourcevar="dbsource"driver="com.mysql.jdbc.Driver"
url="jdbc:mysql://localhost/sampleDB"
user="root" password="pass"/>
<sql:updatedataSource="${dbsource}"var="count">
DELETE FROM product
WHERE id='${param.id}'
</sql:update>
<c:iftest="${count>=1}">
<fontsize="5"color='green'> Congratulations ! Data deleted
successfully.</font>
<ahref="index.jsp">Go Home</a>
</c:if>
</body>
</html>


6a. Create a Currency Converter application using EJB.
------------------- index.html ------------------------------------
<html><head><title>Currency Converter</title></head>
<body>
<form action="CCServlet" >
 Enter Amount <input type="text" name="amt"><br>
 Select Conversion Type
<input type="radio" name="type" value="r2d" checked>Rupees to Dollar
<input type="radio" name="type" value="d2r" >Dollor to Rupees<br>
<input type="reset" ><input type="submit" value="CONVERT" >
</form>
</body>
</html>
-------------------------------- CCServlet.java --------------------------
package mypack;
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
import javax.ejb.EJB;
import mybeans.CCBean;
public class CCServlet extends HttpServlet {
 @EJB CCBean obj;
public void doGet(HttpServletRequest request, HttpServletResponse response)
 throws ServletException, IOException {
 response.setContentType("text/html;charset=UTF-8");
PrintWriter out = response.getWriter();
double amt = Double.parseDouble(request.getParameter("amt"));
if(request.getParameter("type").equals("r2d"))
{
out.println("<h1>"+amt+ " Rupees = "+obj.r2Dollor(amt)+" Dollors</h1>");
}
if(request.getParameter("type").equals("d2r"))
{
out.println("<h1>"+amt+ " Dollors = "+obj.d2Rupees(amt)+" Rupees</h1>");
}
}}
------------------------- CCBean ----------------------------
Create a stateless session bean
-----------------------------------------------------------------
package mybeans;
import javax.ejb.Stateless;
@Stateless
public class CCBean {
public CCBean(){}
public double r2Dollor(double r){ return r/65.65; }
public double d2Rupees(double d){ return d*65.65; }
}


6b. Develop a Simple Room Reservation System Application Using EJB.
Create table rookbook(RoomId varchar(4) PRIMARY KEY, RoomType varchar(20), charges
number(5,2), cust varchar(20), mob varchar(20) , status varchar(10))
insert into roombook values('1001','Delux',5000.00,'','','Not Booked')
insert into roombook values('1002','Super Delux',7000.00,'','','Not Booked')
insert into roombook values('1003','Suit',9500.00,'','','Not Booked')
insert into roombook values('2001','Delux',5000.00,'','','Not Booked')
insert into roombook values('2002','Super Delux',7000.00,'','','Not Booked')
insert into roombook values('2003','Suit',9500.00,'','','Not Booked')
-------------------------------------RoomBook.html ------------------------------------
<form action="RBServlet" >
 Select a room Type
<input type="radio" name="txtType" value="Delux">Delux
<input type="radio" name="txtType" value="Super Delux">Super Delux
<input type="radio" name="txtType" value="Suit">Suit<br>
 Enter Your Name<input type="text" name="txtCust" ><br>
 Enter Mobile No.<input type="text" name="txtMob" ><br>
<input type="reset" ><input type="submit" value="Book Room">
</form>
------------------------------------------RBServlet--------------------------------------
package mypack;
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
import javax.ejb.EJB;
import mybeans.RRBean;
public class RBServlet extends HttpServlet {
@EJB RRBean obj;
public void doGet(HttpServletRequest request, HttpServletResponse response)
throws ServletException, IOException{
PrintWriter out=response.getWriter();
String rt=request.getParameter("txtType");
String cn=request.getParameter("txtCust");
String cm=request.getParameter("txtMob");
String msg = obj.roomBook(rt, cn, cm);
 out.println(msg);
}}
-------------------------------------------RRBean.java ----------------------------------
package mybeans;
import javax.ejb.Stateless;
import java.sql.*;
@Stateless
public class RRBean {
public RRBean(){}
public String roomBook(String rt, String cn, String cm){
String msg="";
try{
Class.forName("com.mysql.jdbc.Driver");
Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/rrdb","root","root");
String query="select * from roombook where RoomType=? and status='Not Booked'";
PreparedStatement pst = con.prepareStatement(query);
pst.setString(1,rt);
ResultSet rs= pst.executeQuery();
if(rs.next()){
 String rno=rs.getString(1);
PreparedStatement stm1 = con.prepareStatement("update roombook set cust=? where RoomId=? ");
PreparedStatement stm2 = con.prepareStatement("update roombook set mobile=? where RoomId=? ");
PreparedStatement stm3 = con.prepareStatement("update roombook set status=? where RoomId=? ");
stm1.setString(1,cn); stm1.setString(2,rno);
stm2.setString(1,cm); stm2.setString(2,rno);
stm3.setString(1, "Booked"); stm3.setString(2,rno);
stm1.executeUpdate();
stm2.executeUpdate();
stm3.executeUpdate();
msg = "Room "+rno+ " Booked <br> Charges = "+rs.getString(3);
}
else
{
msg = "Room "+rt+ " currently Not available";
}
}catch(Exception e){msg=""+e;}
return msg;}}


6c. Develop simple shopping cart application using EJB [Stateful Session Bean].
CartBeanLocal.java
package cart;
import java.util.List;
import javax.ejb.Local;
@Local
public interface CartBeanLocal {
 public void initialize(String person) throws Exception;
 public void initialize(String person, String id)
 throws Exception;
 public void addBook(String title);
 public void removeBook(String title) throws Exception;
 public List<String> getContents();
 public void remove();
}
CartBean.java
~~~~~~~~~~~~
package cart;
import java.util.ArrayList;
import java.util.List;
import javax.ejb.Remove;
import javax.ejb.Stateful;
@Stateful
public class CartBean implements CartBeanLocal {
 String customerName;
 String customerId;
 List<String> contents;
 public void initialize(String person, String id)
 throws Exception {
 if (person == null) {
 throw new Exception("Null person not allowed.");
 } else {
 customerName = person;
 }
 if ( person=="ABC" && id=="123") {
customerId = id;
 } else {
 throw new Exception("Invalid id: " + id);
 }
 contents = new ArrayList<String>();
 }
 public void addBook(String title) {
 contents.add(title);
 }
 public void removeBook(String title) throws Exception {
 boolean result = contents.remove(title);
 if (result == false) {
 throw new Exception(title + " not in cart.");
 }
 }
 public List<String> getContents() {
 return contents;
 }
 @Remove
 public void remove() {
 contents = null;
 }
}
package testcart;
import cart.CartBeanLocal;
import java.io.*;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.naming.*;
import javax.servlet.*;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.*;
@WebServlet(name = "CartTestServlet", urlPatterns = {"/CartTestServlet"})
public class CartTestServlet extends HttpServlet {
 CartBeanLocal cartBean = lookupCartBeanLocal();
 @Override
 protected void doGet(HttpServletRequest request, HttpServletResponse response)
 throws ServletException, IOException {
 response.setContentType("text/html;charset=UTF-8");
 try{
 cartBean.initialize("ABC", "123");
 }catch(Exception e){}
 cartBean.addBook("Java 8 Cookbook");
 cartBean.addBook("Enterprise Java 7 ");
 cartBean.addBook("Java for Dummies");
 cartBean.addBook("Learn Java 8");
 try (PrintWriter out = response.getWriter()) {
try{
 List<String> books = cartBean.getContents();
 for( String s : books)
 out.println(s +"<br />");
 }catch(Exception e){}
 }
 }
 private CartBeanLocal lookupCartBeanLocal() {
 try {
 Context c = new InitialContext();
 return (CartBeanLocal) c.lookup("java:global/EnterpriseApplication1/EnterpriseApplication1-
ejb/CartBean!cart.CartBeanLocal");
 } catch (NamingException ne) {
 Logger.getLogger(getClass().getName()).log(Level.SEVERE, "exception caught", ne);
 throw new RuntimeException(ne);
 }
 }
}

7a. Develop simple EJB application to demonstrate Servlet Hit count using Singleton Session Beans.
Organization of file in Project Folder
----------------------- CounterBean.java ------------------------------------
package counter.ejb;
import javax.ejb.Singleton;
@Singleton
public class CounterBean {
 private int hits = 1;
 // Increment and return the number of hits
 public int getHits() {
 return hits++;
 }
}
------------------------------------ Count.java ------------------------------------
package mypack;
import java.io.Serializable;
import javax.ejb.EJB;
import javax.enterprise.context.ConversationScoped;
import javax.inject.Named;
import counter.ejb.CounterBean;
@Named("count")
@ConversationScoped
public class Count implements Serializable {
 @EJB
private CounterBean counterBean;
 private int hitCount;
 public Count() {
 this.hitCount = 0;
 }
 public int getHitCount() {
 hitCount = counterBean.getHits();
 return hitCount;
 }
 public void setHitCount(int newHits) {
 this.hitCount = newHits;
 }
}
--------------------------------------------- HitCountPage.xhtml -----------------------
<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
 xmlns:h="http://xmlns.jcp.org/jsf/html">
<h:head>
<title>Page Hit Counter Using Singleton Session Bean ~~~~ </title>
</h:head>
<h:body>
<h1>Welcome to Hit Count Page</h1>
 Page was hit #{count.hitCount} times
</h:body>
</html>

7b. Develop simple visitor Statistics application using Message Driven Bean [Stateless Session Bean].
7c. Develop simple Marks Entry Application to demonstrate accessing Database using EJB.
<Any application to the best of Teachers assumption >


8a. Develop a simple Inventory Application Using JPA.
8b. Develop a Guestbook Application Using JPA.
JPA Practical using GuestBook
Steps:
1. Create Web Application with dedicated folder for Library
2. Add Simple java class or Persitent Entity class from Database (code below GuestBook.java)
3. Add SQL Connector Jar file to Library
4. Create Persistence Unit using jdbc connection to MySQL database
5. Create the JSP files (codes given below)
6. Run the Application.
GuestBook.java
~~~~~~~~~~~~~
package asif;
import javax.persistence.*;
@Entity
@Table(name="GuestBook")
public class GuestBook {
@Id
@GeneratedValue(strategy = GenerationType.IDENTITY)
@Column(name="VisitorNo", unique=true, updatable=false)
private Integer visitorNo;
@Column(name="VisitorName")
private String visitorName;
@Column(name="Message")
private String message;
@Column(name="MessageDate")
private String messageDate;
public GuestBook() {
}
public Integer getVisitorNo() {
return visitorNo;
}
public void setVisitorNo(Integer visitorNo) {
this.visitorNo = visitorNo;
}
public String getVisitorName() {
return visitorName;
}
public void setVisitorName(String visitorName) {
this.visitorName = visitorName;
}
public String getMessage() {
return message;
}
public void setMessage(String message) {
this.message = message;
}
public String getMessageDate() {
return messageDate;
}
public void setMessageDate(String messageDate) {
this.messageDate = messageDate;
}
}
index.jsp
~~~~~~~~~~
<%@page contentType="text/html" pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<body style="background-color: pink;">
Sign the Guest Book
<form action="GuestBookView.jsp" method="post">
Visitor Name: <input name="guest" maxlength="25" size="50" />
Message: <textarea rows="5" cols="36" name="message"></textarea>
<input type="submit" name="btnSubmit" value="Submit" />
</form>
</body>
</html>
GuestBookView.jsp
~~~~~~~~~~~~~~~~~
<%@page import="java.util.*,javax.persistence.*,asif.GuestBook" %>
<%@page contentType="text/html" pageEncoding="UTF-8"%>
<!DOCTYPE html>
<%!
private EntityManagerFactory entityManagerFactory;
private EntityManager entityManager;
private EntityTransaction entityTransaction;
List<GuestBook> guestbook;
%>
<%
entityManagerFactory = Persistence.createEntityManagerFactory("JPAApplication1PU");
entityManager = entityManagerFactory.createEntityManager();
String submit = request.getParameter("btnSubmit");
if(submit != null && ("Submit").equals(submit)) {
try {
String guest = request.getParameter("guest");
String message = request.getParameter("message");
String messageDate = new java.util.Date().toString();
GuestBook gb = new GuestBook();
gb.setVisitorName(guest);
gb.setMessage(message);
gb.setMessageDate(messageDate);
entityTransaction = entityManager.getTransaction();
entityTransaction.begin();
entityManager.persist(gb);
entityTransaction.commit();
} catch (RuntimeException e) {
if(entityTransaction != null) entityTransaction.rollback();
throw e;
}
response.sendRedirect("GuestBookView.jsp");
}
try {
guestbook = entityManager.createQuery("SELECT g from GuestBook g").getResultList();
} catch (RuntimeException e) { }
entityManager.close();
%>
<html>
<body>
View the Guest Book <b>Click <a href="index.jsp"> here</a> to sign the guestbook.</b>
<hr />
<%
Iterator iterator = guestbook.iterator();
while (iterator.hasNext()) {
GuestBook obj = (GuestBook) iterator.next();
%>
On <%= obj.getMessageDate() %>,<br />
<b><%= obj.getVisitorName() %>:</b>
<%= obj.getMessage() %>
<br /><br />
<%
}
%>
</body>
</html>
8c. Create simple JPA application to store and retrieve Book details.<< similar to above example >>

9a. Develop a JPA Application to demonstrate use of ORM associations.
9b. Develop a Hibernate application to store Feedback of Website Visitor in MySQL Database.
create database feedbackdb;
create table GuestBook(
vno int PRIMARY KEY AUTO_INCREMENT,
vname varchar(50),
msg varchar(100),
mdate varchar(50)
)
------------------------------- GuestBookBean.java ----------------------------------------------
package mypack;
import javax.persistence.*;
@Entity
@Table(name="guestbook")
public class GuestBookBean implements java.io.Serializable {
 @Id
 @GeneratedValue
 @Column(name="vno")
 private Integer visitorNo;
 @Column(name="vname")
 private String visitorName;
 @Column(name="msg")
 private String msg;
 @Column(name="mdate")
 private String msgDate;
 public GuestBookBean() { }
 public Integer getVisitorNo() { return visitorNo; }
 public String getVisitorName() { return visitorName; }
 public String getMsg() { return msg; }
 public String getMsgDate() { return msgDate; }
 public void setVisitorNo(Integer vn) { visitorNo = vn ; }
public void setVisitorName(String vn) { visitorName = vn; }
 public void setMsg(String m) { msg = m; }
 public void setMsgDate(String md) { msgDate=md; }
}
Source packages â†’new â†’ othersâ†’select category Hibernate â†’Hibernate Configuration Wizard
<hibernate-configuration>
<session-factory>
<property name="hibernate.dialect">org.hibernate.dialect.MySQLDialect</property>
<property name="hibernate.connection.driver_class">com.mysql.jdbc.Driver</property>
<property
name="hibernate.connection.url">jdbc:mysql://localhost:3306/feedbackdb?zeroDateTimeBehavior=co
nvertToNull</property>
<property name="hibernate.connection.username">root</property>
<property name="hibernate.connection.password">root</property>
<mapping class="mypack.GuestBookBean" />
</session-factory>
</hibernate-configuration>
-------------------------------- index.html----------------------------------------------------
<h1>Website Feedback Form for google.con </h1>
<form action="fb.jsp" >
 Enter Your Name: <input type="text" name="name" ><br>
 Enter Your Message : <textarea rows="10" cols="50" name="message" ></textarea><br>
<input type="submit" value="Submit My FeedBack " >
</form>
-------------------------------- fb.jsp----------------------------------------------------
<%@page import="org.hibernate.*, org.hibernate.cfg.*, mypack.*" %>
<%! SessionFactory sf;
org.hibernate.Session hibSession;
%>
<%
sf = new Configuration().configure().buildSessionFactory();
hibSession = sf.openSession();
Transaction tx = null;
GuestBookBean gb = new GuestBookBean();
try{
tx = hibSession.beginTransaction();
String username = request.getParameter("name");
String usermsg = request.getParameter("message");
String nowtime = ""+new java.util.Date();
gb.setVisitorName(username);
gb.setMsg(usermsg);
gb.setMsgDate(nowtime);
hibSession.save(gb);
tx.commit();
out.println("Thank You for your valuable feedback....");
}catch(Exception e){out.println(e);}
hibSession.close();
%>

9c.Develop a Hibernate application to store and retrieve employee details in MySQL Database.
<<Similar to above appication>>
10a. Develop an application to demonstrate Hibernate One- To -One Mapping Using Annotation.
10b. Develop Hibernate application to enter and retrieve course details with ORM Mapping.
10c. Develop a five page web application site using any two or three Java EE Technologies.
<<Any application to the best of teachers own assumption >>
